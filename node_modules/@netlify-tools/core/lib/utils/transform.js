"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupVariablesByContext = exports.getVariablesByContext = exports.getContextualizedVariables = exports.getFormattedName = exports.getFormattedContext = void 0;
const constants_1 = require("./constants");
exports.getFormattedContext = (context) => {
    const cleanContextName = context.replace(/[^a-zA-Z0-9_]/g, '_');
    return `_${cleanContextName.toUpperCase()}`;
};
/**
 * Concat the given context to the given name, then it is capitalized.
 * When context is production no suffix is added
 *
 * @example
 *
 * @param {string} name variable name
 * @param {string} context context name
 *
 * @return {string} formatted variable
 */
exports.getFormattedName = (name, context) => {
    if (!context || context.toLowerCase() === constants_1.KnownContext.Default) {
        return name;
    }
    return `${name}${exports.getFormattedContext(context)}`;
};
exports.getContextualizedVariables = (variables, context) => {
    const result = {};
    return Object.entries(variables).reduce((acc, [key, value]) => {
        acc[exports.getFormattedName(key, context)] = value;
        return acc;
    }, result);
};
exports.getVariablesByContext = (env, context) => {
    const entries = Object.entries(env);
    const formattedContext = exports.getFormattedContext(context);
    return entries
        .filter(([key]) => key.endsWith(formattedContext))
        .reduce((acc, [key, value]) => {
        const variable = key.replace(new RegExp(`${formattedContext}$`), '');
        acc[variable] = value;
        return acc;
    }, {});
};
/**
 * Group env variables by context
 * @param {object} env object with the variables definition
 *
 * @returns {object} grouped env variables
 */
exports.groupVariablesByContext = (env, branches) => {
    const entries = Object.entries(env);
    const formattedContexts = [
        ...constants_1.RESERVED_CONTEXT_NAMES,
        ...branches.map(exports.getFormattedContext),
    ];
    const result = entries.reduce((acc, [key, value]) => {
        var _a;
        const context = formattedContexts.find((c) => key.match(new RegExp(`${c}$`, 'gi')));
        if (!context) {
            acc[constants_1.KnownContext.Default][key] = value;
            return acc;
        }
        const variable = key.replace(new RegExp(`${context}$`), '');
        acc[context] = (_a = acc[context]) !== null && _a !== void 0 ? _a : {};
        acc[context][variable] = value;
        return acc;
    }, { [constants_1.KnownContext.Default]: {} });
    return result;
};
